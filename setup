#!/bin/bash

# Script name
MyScriptName='BytesPH - AkoSiBytes'
MYIP=$(wget -qO- icanhazip.com);
MYIP2="s/xxxxxxxxx/$MYIP/g";

# OpenSSH Ports
SSH_Port1='22'
SSH_Port2='226'

# Your SSH Banner
SSH_Banner='https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Plugins/issue.net'

# Dropbear Ports
Dropbear_Port1='442'
Dropbear_Port2='110'

# Stunnel Ports
Stunnel_Port1='443' # through Dropbear
Stunnel_Port2='444' # through OpenSSH

# OpenVPN Ports
OpenVPN_TCP_Port='1194'
OpenVPN_UDP_Port='445'

# Privoxy Ports
Privoxy_Port1='9000'
Privoxy_Port2='9999'

# Squid Ports
Squid_Port1='3128'
Squid_Port2='8080'
Squid_Port3='8000'

# OpenVPN Config Download Port
OvpnDownload_Port='85' # Before changing this value, please read this document. It contains all unsafe ports for Google Chrome Browser, please read from line #23 to line #89: https://chromium.googlesource.com/chromium/src.git/+/refs/heads/raw/master/net/base/port_util.cc

# Server local time
MyVPS_Time='Asia/Manila'
#############################

# Install curl & wget
apt-get install wget -y
apt-get install curl -y

#Install Iptables Rules
apt-get install netfilter-persistent -y

#############################
#############################
## All function used for this script
#############################
## WARNING: Do not modify or edit anything
## if you did'nt know what to do.
## This part is too sensitive.
#############################
#############################

function InstUpdates(){
  clear
  echo "Installing Updates"
 export DEBIAN_FRONTEND=noninteractive
 apt update -y
 apt upgrade -y
 apt-get update -y
 apt-get upgrade -y

# Install Ssl & Certificates
 apt install ssl-cert -y
 apt install ca-certificates -y

 # Removing some firewall tools that may affect other services
 apt-get remove --purge ufw firewalld -y
 apt-get remove --purge exim4 -y
 
 # Installing some important machine essentials
 apt-get install nano -y
 apt-get install zip -y
 apt-get install unzip -y
 apt-get install tar -y
 apt-get install gzip -y
 apt-get install p7zip-full -y
 apt-get install bc -y
 apt-get install rc -y
 apt-get install openssl -y
 apt-get install cron -y
 apt-get install net-tools -y
 apt-get install dnsutils -y
 apt-get install dos2unix -y
 apt-get install screen -y
 apt-get install bzip2 -y
 apt-get install ccrypt -y
 
 # Now installing all our wanted services
 apt-get install dropbear -y
 apt-get install stunnel4 -y
 apt-get install privoxy -y
 apt-get install ca-certificates -y
 apt-get install nginx -y
 apt-get install ruby -y
 apt-get install apt-transport-https -y
 apt-get install lsb-release -y
 apt-get install squid3 -y
 apt-get install squid -y
 
 # Installing all required packages to install Webmin
 apt-get install perl -y
 apt-get install libnet-ssleay-perl -y
 apt-get install openssl -y
 apt-get install libauthen-pam-perl -y
 apt-get install libpam-runtime -y
 apt-get install libio-pty-perl -y
 apt-get install apt-show-versions -y
 apt-get install python -y
 apt-get install dbus -y
 apt-get install libxml-parser-perl -y
 apt-get install shared-mime-info -y
 apt-get install jq -y
 apt-get install fail2ban -y

 # Installing a text colorizer
 gem install lolcat

 # Trying to remove obsolette packages after installation
 apt-get autoremove -y

 # go to root
 cd

# Edit file /etc/systemd/system/rc-local.service
cat > /etc/systemd/system/rc-local.service <<-END
[Unit]
Description=/etc/rc.local
ConditionPathExists=/etc/rc.local
[Service]
Type=forking
ExecStart=/etc/rc.local start
TimeoutSec=0
StandardOutput=tty
RemainAfterExit=yes
SysVStartPriority=99
[Install]
WantedBy=multi-user.target
END

# nano /etc/rc.local
cat > /etc/rc.local <<-END
#!/bin/sh -e
# rc.local
# By default this script does nothing.
exit 0
END

# Change Permission Access
chmod +x /etc/rc.local

# enable rc local
systemctl enable rc-local

systemctl start rc-local.service

# disable ipv6
echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
sed -i '$ i\echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6' /etc/rc.local
 
 # Installing OpenVPN by pulling its repository inside sources.list file 
 rm -rf /etc/apt/sources.list.d/openvpn*
 echo "deb http://build.openvpn.net/debian/openvpn/stable $(lsb_release -sc) main" > /etc/apt/sources.list.d/openvpn.list
 wget -qO - http://build.openvpn.net/debian/openvpn/stable/pubkey.gpg|apt-key add -
 apt-get update -y
 apt-get install openvpn -y
} &>/dev/null
function InstWebmin(){
  clear
  echo "Installing Webmin"
 # Download the webmin .deb package
 # You may change its webmin version depends on the link you've loaded in this variable(.deb file only, do not load .zip or .tar.gz file):
 apt-get install apt-transport-https -y
 apt-get install gnupg2 -y
 apt-get install curl -y
 sudo echo "deb https://download.webmin.com/download/repository sarge contrib" \ > /etc/apt/sources.list.d/webmin.list
 curl https://download.webmin.com/jcameron-key.asc | sudo apt-key add -
 
 # Installing .deb package for webmin
 apt-get update -y
 apt-get install webmin -y
 
 # Configuring webmin server config to use only http instead of https
 sed -i 's|ssl=1|ssl=0|g' /etc/webmin/miniserv.conf
 
 # Then restart to take effect
 systemctl restart webmin
} &>/dev/null
function InstSSH(){
  clear
  echo "Installing SSH"
 # Removing some duplicated sshd server configs
 rm -f /etc/ssh/sshd_config*
 
 # Creating a SSH server config using cat eof tricks
 cat <<'MySSHConfig' > /etc/ssh/sshd_config
# My OpenSSH Server config
Port myPORT1
Port myPORT2
AddressFamily inet
ListenAddress 0.0.0.0
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key
PermitRootLogin yes
MaxSessions 1024
PubkeyAuthentication yes
PasswordAuthentication yes
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UsePAM yes
X11Forwarding yes
PrintMotd no
ClientAliveInterval 240
ClientAliveCountMax 2
UseDNS no
Banner /etc/banner
AcceptEnv LANG LC_*
Subsystem   sftp  /usr/lib/openssh/sftp-server
MySSHConfig

 # Now we'll put our ssh ports inside of sshd_config
 sed -i "s|myPORT1|$SSH_Port1|g" /etc/ssh/sshd_config
 sed -i "s|myPORT2|$SSH_Port2|g" /etc/ssh/sshd_config

 # Download our SSH Banner
 rm -f /etc/banner
 wget -qO /etc/banner "$SSH_Banner"
 dos2unix -q /etc/banner

 # My workaround code to remove `BAD Password error` from passwd command, it will fix password-related error on their ssh accounts.
 sed -i '/password\s*requisite\s*pam_cracklib.s.*/d' /etc/pam.d/common-password
 sed -i 's/use_authtok //g' /etc/pam.d/common-password

 # Some command to identify null shells when you tunnel through SSH or using Stunnel, it will fix user/pass authentication error on HTTP Injector, KPN Tunnel, eProxy, SVI, HTTP Proxy Injector etc ssh/ssl tunneling apps.
 sed -i '/\/bin\/false/d' /etc/shells
 sed -i '/\/usr\/sbin\/nologin/d' /etc/shells
 echo '/bin/false' >> /etc/shells
 echo '/usr/sbin/nologin' >> /etc/shells
 
 # Restarting openssh service
 systemctl restart ssh
 
 # Removing some duplicate config file
 rm -rf /etc/default/dropbear*
 
 # creating dropbear config using cat eof tricks
 cat <<'MyDropbear' > /etc/default/dropbear
# My Dropbear Config
NO_START=0
DROPBEAR_PORT=PORT01
DROPBEAR_EXTRA_ARGS="-p PORT02"
DROPBEAR_BANNER="/etc/banner"
DROPBEAR_RSAKEY="/etc/dropbear/dropbear_rsa_host_key"
DROPBEAR_DSSKEY="/etc/dropbear/dropbear_dss_host_key"
DROPBEAR_ECDSAKEY="/etc/dropbear/dropbear_ecdsa_host_key"
DROPBEAR_RECEIVE_WINDOW=65536
MyDropbear

 # Now changing our desired dropbear ports
 sed -i "s|PORT01|$Dropbear_Port1|g" /etc/default/dropbear
 sed -i "s|PORT02|$Dropbear_Port2|g" /etc/default/dropbear
 
 # Restarting dropbear service
 systemctl restart dropbear
} &>/dev/null
function InsStunnel(){
  clear
  echo "Installing Stunnel"
 StunnelDir=$(ls /etc/default | grep stunnel | head -n1)

 # Creating stunnel startup config using cat eof tricks
cat <<'MyStunnelD' > /etc/default/$StunnelDir
# My Stunnel Config
ENABLED=1
FILES="/etc/stunnel/*.conf"
OPTIONS=""
BANNER="/etc/banner"
PPP_RESTART=0
# RLIMITS="-n 4096 -d unlimited"
RLIMITS=""
MyStunnelD

 # Removing all stunnel folder contents
 rm -rf /etc/stunnel/*
 
 # Creating stunnel certifcate using openssl
 openssl req -new -x509 -days 9999 -nodes -subj "/C=PH/ST=NCR/L=Manila/O=$MyScriptName/OU=$MyScriptName/CN=$MyScriptName" -out /etc/stunnel/stunnel.pem -keyout /etc/stunnel/stunnel.pem &> /dev/null
##  > /dev/null 2>&1

 # Creating stunnel server config
 cat <<'MyStunnelC' > /etc/stunnel/stunnel.conf
# My Stunnel Config
pid = /var/run/stunnel.pid
cert = /etc/stunnel/stunnel.pem
client = no
socket = l:TCP_NODELAY=1
socket = r:TCP_NODELAY=1
TIMEOUTclose = 0

[dropbear]
accept = Stunnel_Port1
connect = 127.0.0.1:dropbear_port_c

[openssh]
accept = Stunnel_Port2
connect = 127.0.0.1:openssh_port_c
MyStunnelC

# setting stunnel ports
 sed -i "s|Stunnel_Port1|$Stunnel_Port1|g" /etc/stunnel/stunnel.conf
 sed -i "s|dropbear_port_c|$(netstat -tlnp | grep -i dropbear | awk '{print $4}' | cut -d: -f2 | xargs | awk '{print $2}' | head -n1)|g" /etc/stunnel/stunnel.conf
 sed -i "s|Stunnel_Port2|$Stunnel_Port2|g" /etc/stunnel/stunnel.conf
 sed -i "s|openssh_port_c|$(netstat -tlnp | grep -i ssh | awk '{print $4}' | cut -d: -f2 | xargs | awk '{print $2}' | head -n1)|g" /etc/stunnel/stunnel.conf
 sed -i 's/ENABLED=0/ENABLED=1/g' /etc/default/stunnel4

} &>/dev/null
function InsProxy(){
  clear
  echo "Installing Privoxy"
 # Removing Duplicate privoxy config
 rm -rf /etc/privoxy/config*
 
 # Creating Privoxy server config using cat eof tricks
 cat <<'privoxy' > /etc/privoxy/config
# My Privoxy Server Config
user-manual /usr/share/doc/privoxy/user-manual
confdir /etc/privoxy
logdir /var/log/privoxy
filterfile default.filter
logfile logfile
listen-address 0.0.0.0:Privoxy_Port1
listen-address 0.0.0.0:Privoxy_Port2
toggle 1
enable-remote-toggle 0
enable-remote-http-toggle 0
enable-edit-actions 0
enforce-blocks 0
buffer-limit 4096
enable-proxy-authentication-forwarding 1
forwarded-connect-retries 1
accept-intercepted-requests 1
allow-cgi-request-crunching 1
split-large-forms 0
keep-alive-timeout 5
tolerate-pipelining 1
socket-timeout 300
permit-access 0.0.0.0/0 IP-ADDRESS
privoxy

 # Setting machine's IP Address inside of our privoxy config(security that only allows this machine to use this proxy server)
 sed -i "s|IP-ADDRESS|$IPADDR|g" /etc/privoxy/config
 
 # Setting privoxy ports
 sed -i "s|Privoxy_Port1|$Privoxy_Port1|g" /etc/privoxy/config
 sed -i "s|Privoxy_Port2|$Privoxy_Port2|g" /etc/privoxy/config

 # Removing Duplicate Squid config
 rm -rf /etc/squid/squid.con*
 
 # Creating Squid server config using cat eof tricks
 cat <<'mySquid' > /etc/squid/squid.conf
# My Squid Proxy Server Config
acl VPN dst IP-ADDRESS/32
http_access allow VPN
http_access deny all 
http_port 0.0.0.0:Squid_Port1
http_port 0.0.0.0:Squid_Port2
http_port 0.0.0.0:Squid_Port3
### Allow Headers
request_header_access Allow allow all 
request_header_access Authorization allow all 
request_header_access WWW-Authenticate allow all 
request_header_access Proxy-Authorization allow all 
request_header_access Proxy-Authenticate allow all 
request_header_access Cache-Control allow all 
request_header_access Content-Encoding allow all 
request_header_access Content-Length allow all 
request_header_access Content-Type allow all 
request_header_access Date allow all 
request_header_access Expires allow all 
request_header_access Host allow all 
request_header_access If-Modified-Since allow all 
request_header_access Last-Modified allow all 
request_header_access Location allow all 
request_header_access Pragma allow all 
request_header_access Accept allow all 
request_header_access Accept-Charset allow all 
request_header_access Accept-Encoding allow all 
request_header_access Accept-Language allow all 
request_header_access Content-Language allow all 
request_header_access Mime-Version allow all 
request_header_access Retry-After allow all 
request_header_access Title allow all 
request_header_access Connection allow all 
request_header_access Proxy-Connection allow all 
request_header_access User-Agent allow all 
request_header_access Cookie allow all 
request_header_access All deny all
### HTTP Anonymizer Paranoid
reply_header_access Allow allow all 
reply_header_access Authorization allow all 
reply_header_access WWW-Authenticate allow all 
reply_header_access Proxy-Authorization allow all 
reply_header_access Proxy-Authenticate allow all 
reply_header_access Cache-Control allow all 
reply_header_access Content-Encoding allow all 
reply_header_access Content-Length allow all 
reply_header_access Content-Type allow all 
reply_header_access Date allow all 
reply_header_access Expires allow all 
reply_header_access Host allow all 
reply_header_access If-Modified-Since allow all 
reply_header_access Last-Modified allow all 
reply_header_access Location allow all 
reply_header_access Pragma allow all 
reply_header_access Accept allow all 
reply_header_access Accept-Charset allow all 
reply_header_access Accept-Encoding allow all 
reply_header_access Accept-Language allow all 
reply_header_access Content-Language allow all 
reply_header_access Mime-Version allow all 
reply_header_access Retry-After allow all 
reply_header_access Title allow all 
reply_header_access Connection allow all 
reply_header_access Proxy-Connection allow all 
reply_header_access User-Agent allow all 
reply_header_access Cookie allow all 
reply_header_access All deny all
### CoreDump
coredump_dir /var/spool/squid
dns_nameservers 8.8.8.8 8.8.4.4
refresh_pattern ^ftp: 1440 20% 10080
refresh_pattern ^gopher: 1440 0% 1440
refresh_pattern -i (/cgi-bin/|\?) 0 0% 0
refresh_pattern . 0 20% 4320
visible_hostname PR Aiman
mySquid

 # Setting machine's IP Address inside of our Squid config(security that only allows this machine to use this proxy server)
 sed -i "s|IP-ADDRESS|$IPADDR|g" /etc/squid/squid.conf
 
 # Setting squid ports
 sed -i "s|Squid_Port1|$Squid_Port1|g" /etc/squid/squid.conf
 sed -i "s|Squid_Port2|$Squid_Port2|g" /etc/squid/squid.conf
 sed -i "s|Squid_Port3|$Squid_Port3|g" /etc/squid/squid.conf

 # Starting Proxy server
 echo -e "Restarting proxy server..."
 systemctl restart squid
} &>/dev/null
function ip_address(){
  clear
  echo "Finishing Installation"
  local IP="$( ip addr | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | egrep -v "^192\.168|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-2]\.|^10\.|^127\.|^255\.|^0\." | head -n 1 )"
  [ -z "${IP}" ] && IP="$( wget -qO- -t1 -T2 ipv4.icanhazip.com )"
  [ -z "${IP}" ] && IP="$( wget -qO- -t1 -T2 ipinfo.io/ip )"
  [ ! -z "${IP}" ] && echo "${IP}" || echo
} &>/dev/null
IPADDR="$(ip_address)"
function ConfStartup(){
 # Daily reboot time of our machine
 # For cron commands, visit https://crontab.guru
 echo "10 0 * * * root clear-log && reboot" >> /etc/crontab

 # Creating directory for startup script
 rm -rf /etc/bytesph
 mkdir -p /etc/bytesph
 chmod -R 755 /etc/bytesph

 # Creating startup script using cat eof tricks
 cat <<'EOFSH' > /etc/bytesph/startup.sh
#!/bin/bash
# Setting server local time
ln -fs /usr/share/zoneinfo/MyVPS_Time /etc/localtime

# Prevent DOS-like UI when installing using APT (Disabling APT interactive dialog)
export DEBIAN_FRONTEND=noninteractive

# Allowing ALL TCP ports for our machine (Simple workaround for policy-based VPS)
iptables -A INPUT -s $(wget -4qO- http://ipinfo.io/ip) -p tcp -m multiport --dport 1:65535 -j ACCEPT

# Allowing OpenVPN to Forward traffic
/bin/bash /etc/openvpn/openvpn.bash

# Deleting Expired SSH Accounts
/usr/local/sbin/delete_expired &> /dev/null
exit 0
EOFSH
 chmod +x /etc/bytesph/startup.sh

 # Setting server local time every time this machine reboots
 sed -i "s|MyVPS_Time|$MyVPS_Time|g" /etc/bytesph/startup.sh

 #
 rm -rf /etc/sysctl.d/99*

 # Setting our startup script to run every machine boots
 cat <<'FordServ' > /etc/systemd/system/bytesph.service
[Unit]
Description=bytesph Startup Script
Before=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/bin/bash /etc/bytesph/startup.sh
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
FordServ
 chmod +x /etc/systemd/system/bytesph.service
 systemctl daemon-reload
 systemctl start bytesph
 systemctl enable bytesph &> /dev/null
 systemctl enable fail2ban &> /dev/null
 systemctl start fail2ban &> /dev/null

 # Rebooting cron service
 systemctl restart cron
 systemctl enable cron

} &>/dev/null
 #Create Admin
 useradd -m bytes
 echo "bytes:Premium2018Premium" | chpasswd
function ConfMenu(){
  clear
echo -e " Creating Menu scripts.."

# Download Script
cd /usr/local/sbin/
wget -O bench-network "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/bench-network"
wget -O connections "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/connections"
wget -O create "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/create"
wget -O create_trial "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/create_trial"
wget -O delete_expired "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/delete_expired"
wget -O edit_dropbear "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/edit_dropbear"
wget -O edit_openssh "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/edit_openssh"
wget -O edit_openvpn "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/edit_openvpn"
wget -O edit_ports "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/edit_ports"
wget -O edit_squid3 "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/edit_squid3"
wget -O edit_stunnel4 "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/edit_stunnel4"
wget -O menu "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/menu"
wget -O options "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/options"
wget -O ram "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/ram"
wget -O reboot_sys "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/reboot_sys"
wget -O reboot_sys_auto "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/reboot_sys_auto"
wget -O renew_account "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/renew_account"
wget -O restart_services "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/restart_services"
wget -O set_multilogin_autokill "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/set_multilogin_autokill"
wget -O set_multilogin_autokill_lib "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/set_multilogin_autokill_lib"
wget -O show_ports "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/show_ports"
wget -O user_delete "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/user_delete"
wget -O user_list "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/user_list"
wget -O change_timezone "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/change_timezone"
wget -O speedtest "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/speedtest_cli.py"
chmod +x bench-network
chmod +x connections
chmod +x create
chmod +x create_trial
chmod +x delete_expired
chmod +x edit_dropbear
chmod +x edit_openssh
chmod +x edit_openvpn
chmod +x edit_ports
chmod +x edit_squid3
chmod +x edit_stunnel4
chmod +x menu
chmod +x options
chmod +x ram
chmod +x reboot_sys
chmod +x reboot_sys_auto
chmod +x renew_account
chmod +x restart_services
chmod +x set_multilogin_autokill
chmod +x set_multilogin_autokill_lib
chmod +x show_ports
chmod +x user_delete
chmod +x user_list
chmod +x change_timezone
chmod +x speedtest
dos2unix ./* &> /dev/null
sed -i 's|/etc/squid/squid.conf|g' ./*
sed -i 's|http_port|g' ./*
cd ~
} &>/dev/null
function ScriptMessage(){
 echo -e ""
 echo -e "$MyScriptName Installation"
 echo -e ""
 sleep 0.5
 echo -e "Report Bugs https://t.me/bytesph2023"
 echo -e ""
 sleep 0.5
 echo -e "Starting Installation..."
 echo -e ""
 sleep 0.5
} &>/dev/null
function InstBadVPN(){
  clear
  echo "Installing BadVPN"
 # Pull BadVPN Binary 64bit or 32bit
if [ "$(getconf LONG_BIT)" == "64" ]; then
 wget -O /usr/bin/badvpn-udpgw "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Plugins/badvpn-udpgw64"
else
 wget -O /usr/bin/badvpn-udpgw "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Plugins/badvpn-udpgw"
fi
 # Set BadVPN to Start on Boot via .profile
 sed -i '$ i\screen -AmdS badvpn badvpn-udpgw --listen-addr 127.0.0.1:7300' /root/.profile
 # Change Permission to make it Executable
 chmod +x /usr/bin/badvpn-udpgw
 # Start BadVPN via Screen
 screen -AmdS badvpn badvpn-udpgw --listen-addr 127.0.0.1:7300
} &>/dev/null


#############################################
#############################################
########## Installation Process #############
#############################################
## WARNING: Do not modify or edit anything
## if you did'nt know what to do.
## This part is too sensitive.
#############################################
#############################################

 # First thing to do is check if this machine is Debian
 source /etc/os-release
if [[ "$ID" != 'debian' ]]; then
 ScriptMessage
 echo -e "Error This script is for Debian only, exiting..."
 sleep 5
 exit 1
fi

 # Now check if our machine is in root user, if not, this script exits
 # If you're on sudo user, run `sudo su -` first before running this script
 if [[ $EUID -ne 0 ]];then
 ScriptMessage
 echo -e "Error This script must be run as root, exiting..."
 exit 1
fi

 # (For OpenVPN) Checking it this machine have TUN Module, this is the tunneling interface of OpenVPN server
 if [[ ! -e /dev/net/tun ]]; then
 echo -e "Error\e[0m] You cant use this script without TUN Module installed/embedded in your machine, file a support ticket to your machine admin about this matter"
 echo -e "Script is now exiting..."
 exit 1
fi

 # Begin Installation by Updating and Upgrading machine and then Installing all our wanted packages/services to be install.
 ScriptMessage
 sleep 2
 InstUpdates

 # Configure OpenSSH and Dropbear
 echo -e "Configuring ssh..."
 InstSSH

 # Configure Stunnel
 echo -e "Configuring stunnel..."
 InsStunnel

 # Configure BadVPN UDPGW
 echo -e "Configuring BadVPN UDPGW..."
 InstBadVPN

 # Configure Webmin
 echo -e "Configuring webmin..."
 InstWebmin

 # Configure Squid
 echo -e "Configuring proxy..."
 InsProxy

 # Configure OpenVPN
 echo -e "Configuring OpenVPN..."
 InsOpenVPN

 # Configuring Nginx OVPN config download site
 OvpnConfigs

 # Some assistance and startup scripts
 ConfStartup

 ## DNS maker plugin for BytesPH users(for vps script usage only)
 wget -qO dnsmaker "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Others/debian-vps"
 chmod +x dnsmaker
 ./dnsmaker
 rm -rf dnsmaker
 sed -i "s|http-proxy $IPADDR|http-proxy $(cat /tmp/abonv_mydns)|g" /var/www/openvpn/client-tcp.ovpn
 sed -i "s|http-proxy $IPADDR|http-proxy $(cat /tmp/abonv_mydns)|g" /var/www/openvpn/client-tcp-privoxy.ovpn
 sed -i "s|remote $IPADDR|remote $(cat /tmp/abonv_mydns)|g" /var/www/openvpn/client-udp.ovpn
 curl -4sSL "$(cat /tmp/abonv_mydns_domain)" &> /dev/null
 mv /tmp/abonv_mydns /etc/bonveio/my_domain_name
 mv /tmp/abonv_mydns_id /etc/bonveio/my_domain_id
 rm -rf /tmp/abonv*

 # VPS Menu script v1.0
 ConfMenu

 # Setting server local time
 ln -fs /usr/share/zoneinfo/$MyVPS_Time /etc/localtime

 clear
 cd ~

# Install DDOS Deflate
cd
apt-get -y install dnsutils dsniff
wget "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Others/ddos-deflate-master.zip"
unzip ddos-deflate-master.zip
cd ddos-deflate-master
./install.sh
cd
rm -rf ddos-deflate-master.zip

# Blocked Torrent
iptables -A FORWARD -m string --string "get_peers" --algo bm -j DROP
iptables -A FORWARD -m string --string "announce_peer" --algo bm -j DROP
iptables -A FORWARD -m string --string "find_node" --algo bm -j DROP
iptables -A FORWARD -m string --algo bm --string "BitTorrent" -j DROP
iptables -A FORWARD -m string --algo bm --string "BitTorrent protocol" -j DROP
iptables -A FORWARD -m string --algo bm --string "peer_id=" -j DROP
iptables -A FORWARD -m string --algo bm --string ".torrent" -j DROP
iptables -A FORWARD -m string --algo bm --string "announce.php?passkey=" -j DROP
iptables -A FORWARD -m string --algo bm --string "torrent" -j DROP
iptables -A FORWARD -m string --algo bm --string "announce" -j DROP
iptables -A FORWARD -m string --algo bm --string "info_hash" -j DROP
iptables-save > /etc/iptables.up.rules
iptables-restore -t < /etc/iptables.up.rules
netfilter-persistent save
netfilter-persistent reload

 # Running screenfetch
 wget -O /usr/bin/screenfetch "https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Plugins/screenfetch"
 chmod +x /usr/bin/screenfetch
 echo "/bin/bash /etc/openvpn/openvpn.bash" >> .profile
 echo "clear" >> .profile
 echo "screenfetch" >> .profile

 #Swap Ram For Free Space
 wget https://raw.githubusercontent.com/andresslacson1989/autoscript-installer/master/Files/Menu/swapkvm && chmod +x swapkvm && ./swapkvm

 # Showing script's banner message
 ScriptMessage

 # Showing additional information of this script
echo ""
echo -e "Installation has been completed!!"
echo "--------------------------------------------------------------------------------"
echo -e "                            Debian Premium Script                            "
echo -e "                                  -BytesPH-                                  "
echo "--------------------------------------------------------------------------------"
echo ""  | tee -a log-install.txt
echo -e "Server Information"  | tee -a log-install.txt
echo -e "   - Timezone    : Asia/Kuala_Lumpur (GMT +8)"  | tee -a log-install.txt
echo -e "   - Fail2Ban    : [ON]"  | tee -a log-install.txt
echo -e "   - IPtables    : [ON]"  | tee -a log-install.txt
echo -e "   - Auto-Reboot : [ON]"  | tee -a log-install.txt
echo -e "   - IPv6        : [OFF]"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo -e "Application & Port Information"  | tee -a log-install.txt
echo -e "   - OpenSSH		: $SSH_Port1, $SSH_Port2 "  | tee -a log-install.txt
echo -e "   - Dropbear		: $Dropbear_Port1, $Dropbear_Port2"  | tee -a log-install.txt
echo -e "   - Stunnel/SSL 	: $Stunnel_Port1, $Stunnel_Port2"  | tee -a log-install.txt
echo -e "   - Squid Proxy	: $Squid_Port1 , $Squid_Port2 (limit to IP Server)"  | tee -a log-install.txt
echo -e "   - Squid ELITE	: $Squid_Port3 (limit to IP Server)"  | tee -a log-install.txt
echo -e "   - Privoxy		: $Privoxy_Port1 , $Privoxy_Port2 (limit to IP Server)"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo -e "Premium Script Information"  | tee -a log-install.txt
echo -e "   To display list of commands: menu"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo -e "Important Information"  | tee -a log-install.txt
echo -e "   - Installation Log        : cat /root/log-install.txt"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo -e "   - Webmin                  : http://$IPADDR:10000/"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo -e "   - Modified by BytesPH - AkoSiBytes"  | tee -a log-install.txt
echo -e "   - Telegram Contact        : https://t.me/bytesph2023"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo -e "This script is modified by BytesPH - AkoSiBytes"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "--------------------------------------------------------------------------------"

# Clearing all logs from installation
 rm -rf /root/.bash_history && history -c && echo '' > /var/log/syslog
echo ""
echo -e " Server will be reboot In 5 Sec"
sleep 5
rm -f setup*
reboot
exit 1
 